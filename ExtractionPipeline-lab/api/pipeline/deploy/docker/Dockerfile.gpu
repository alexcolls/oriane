# =============================================================================
# Dockerfile.gpu for FastAPI Pipeline Service with GPU Support
# =============================================================================
# This Dockerfile creates a production-ready container for the FastAPI pipeline
# service with CUDA 12.4.1 support for GPU acceleration.
#
# Usage:
#   docker build -f Dockerfile.gpu -t pipeline-api:gpu .
#   docker run --gpus all -p 8001:8001 pipeline-api:gpu
# =============================================================================

FROM nvidia/cuda:12.4.1-devel-ubuntu22.04

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    python3-venv \
    python3-dev \
    build-essential \
    pkg-config \
    libhdf5-dev \
    libopencv-dev \
    ffmpeg \
    git \
    curl \
    wget \
    && rm -rf /var/lib/apt/lists/*

# Create application directory
WORKDIR /app

# Create non-root user for security
RUN useradd --create-home --shell /bin/bash --uid 1000 appuser && \
    chown -R appuser:appuser /app
USER appuser

# Set up Python environment
ENV PATH="/home/appuser/.local/bin:$PATH"
RUN python3 -m pip install --user --upgrade pip setuptools wheel

# Copy requirements files and install Python dependencies
COPY --chown=appuser:appuser api/pipeline/requirements.txt /app/api_requirements.txt
COPY --chown=appuser:appuser core/py/pipeline/requirements.txt /app/core_requirements.txt

# Install dependencies from both requirements files
RUN python3 -m pip install --user -r /app/api_requirements.txt && \
    python3 -m pip install --user -r /app/core_requirements.txt

# Copy application code
COPY --chown=appuser:appuser api/pipeline/ /app/api/pipeline/
COPY --chown=appuser:appuser core/py/pipeline/ /app/core/py/pipeline/

# Copy .env file for runtime configuration
COPY --chown=appuser:appuser api/pipeline/.env /app/.env

# Set Python path to include both api and core modules
ENV PYTHONPATH="/app:/app/api:/app/core/py:$PYTHONPATH"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8001/health || exit 1

# Expose port
EXPOSE 8001

# Production command
CMD ["python3", "-m", "uvicorn", "api.pipeline.main:app", "--host", "0.0.0.0", "--port", "8001", "--workers", "1"]
