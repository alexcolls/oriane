name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: deploy/docker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Output image
      id: image
      run: |
        echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  unit-tests:
    runs-on: ubuntu-latest
    needs: build
    
    services:
      pipeline-api:
        image: ${{ needs.build.outputs.image }}
        ports:
          - 8000:8000
        env:
          API_NAME: "Pipeline API CI Test"
          API_PORT: 8000
          API_KEY: "ci-test-key-123"
          API_USERNAME: "testuser"
          API_PASSWORD: "testpass"
          MAX_VIDEOS_PER_REQUEST: 10
          VP_OUTPUT_DIR: "/tmp/pipeline-test"
          DEBUG_PIPELINE: 1
          LOCAL_MODE: 1
          SKIP_UPLOAD: 1
        options: >-
          --health-cmd "curl -f http://localhost:8000/health || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest httpx fastapi uvicorn python-dotenv
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f config/requirements-dev.txt ]; then pip install -r config/requirements-dev.txt; fi
    
    - name: Wait for API to be ready
      run: |
        echo "Waiting for API to be ready..."
        timeout 60s bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
    
    - name: Run unit tests
      run: |
        # Run Python unit tests
        if [ -f tests/unit/test_implementation.py ]; then
          python -m pytest tests/unit/test_implementation.py -v
        fi
        
        # Run additional API tests
        if [ -f tests/unit/test_api_functionality.py ]; then
          python -m pytest tests/unit/test_api_functionality.py -v
        fi
        
        # Run all unit tests
        python -m pytest tests/unit/ -v
    
    - name: Run integration tests
      run: |
        # Test basic API endpoints
        echo "Testing health endpoint..."
        curl -f http://localhost:8000/health
        
        echo "Testing root endpoint..."
        curl -f http://localhost:8000/
        
        echo "Testing config endpoint..."
        curl -f http://localhost:8000/config
        
        echo "Testing process endpoint flow..."
        
        # Test POST /process endpoint
        PROCESS_RESPONSE=$(curl -X POST "http://localhost:8000/process" \
          -H "Content-Type: application/json" \
          -H "X-API-Key: ci-test-key-123" \
          -d '{
            "items": [
              {
                "platform": "instagram",
                "code": "test123"
              }
            ]
          }' -s)
        
        echo "Process response: $PROCESS_RESPONSE"
        
        # Extract job ID
        JOB_ID=$(echo "$PROCESS_RESPONSE" | python -c "import sys, json; print(json.load(sys.stdin)['jobId'])")
        
        if [ -z "$JOB_ID" ]; then
          echo "Failed to extract job ID from response"
          exit 1
        fi
        
        echo "Job ID: $JOB_ID"
        
        # Poll job status
        echo "Polling job status..."
        MAX_ATTEMPTS=30
        ATTEMPT=0
        
        while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
          ATTEMPT=$((ATTEMPT + 1))
          
          STATUS_RESPONSE=$(curl -sf "http://localhost:8000/status/$JOB_ID" \
            -H "X-API-Key: ci-test-key-123")
          
          STATUS=$(echo "$STATUS_RESPONSE" | python -c "import sys, json; print(json.load(sys.stdin)['status'])")
          
          echo "Attempt $ATTEMPT: Status = $STATUS"
          
          case "$STATUS" in
            "COMPLETED")
              echo "✅ Job completed successfully!"
              break
              ;;
            "FAILED")
              echo "❌ Job failed!"
              echo "$STATUS_RESPONSE" | python -c "import sys, json; print(json.load(sys.stdin)['log_tail'])"
              exit 1
              ;;
            "RUNNING"|"PENDING")
              echo "Job is still $STATUS, waiting..."
              sleep 10
              ;;
            *)
              echo "Unknown status: $STATUS"
              sleep 10
              ;;
          esac
        done
        
        if [ $ATTEMPT -ge $MAX_ATTEMPTS ]; then
          echo "❌ Job did not complete within expected time"
          exit 1
        fi
        
        # Verify final status
        if [ "$STATUS" != "COMPLETED" ]; then
          echo "❌ Expected status COMPLETED but got: $STATUS"
          exit 1
        fi
        
        echo "✅ Integration tests passed!"
    
    - name: Test jobs endpoint
      run: |
        echo "Testing jobs endpoint..."
        curl -f http://localhost:8000/jobs \
          -H "X-API-Key: ci-test-key-123"
        echo "✅ Jobs endpoint test passed!"

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: read
      security-events: write
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build.outputs.image }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
