import { ConfigService } from '@nestjs/config';
import { Repository } from 'typeorm';
import { InstaContent } from '../../entities/content.entity';
import { AwsS3Service } from '../../aws/aws.s3.service';
import { HikerApiClientService } from '../hiker-api-client/hiker-api-client.service';
import { OrianeUser } from '../../entities/oriane-user.entity';
import { GetAllContentDto, GetAllContentResponseDto } from './dto/get-all-content.dto';
import { RefreshContentResponseDto, RefreshContentByCodeDto } from './dto/refresh-content.dto';
import { AddMonitoredContentDto, AddMonitoredContentResponseDto } from './dto/add-monitored-content.dto';
import { MediaFetchByIdDto, MediaFetchByCodeDto } from './dto/media-fetch.dto';
import { GetFramesImageDto } from './dto/get-frames-image.dto';
export declare class ContentService {
    private readonly contentRepository;
    private readonly userRepository;
    private readonly hikerApiService;
    private readonly configService;
    private readonly awsS3Service;
    private readonly logger;
    constructor(contentRepository: Repository<InstaContent>, userRepository: Repository<OrianeUser>, hikerApiService: HikerApiClientService, configService: ConfigService, awsS3Service: AwsS3Service);
    getAllContent({ content_type, offset, limit, search, }: GetAllContentDto): Promise<GetAllContentResponseDto>;
    refreshContentByCode({ code, }: RefreshContentByCodeDto): Promise<RefreshContentResponseDto>;
    addMonitoredContent({ url, username, }: AddMonitoredContentDto): Promise<AddMonitoredContentResponseDto>;
    getImageById({ id }: MediaFetchByIdDto): Promise<Buffer>;
    getImageByCode({ code }: MediaFetchByCodeDto): Promise<Buffer>;
    getImageUrlById({ id }: MediaFetchByIdDto): Promise<string>;
    getImageUrlByCode({ code }: MediaFetchByCodeDto): Promise<string>;
    getVideoById({ id }: MediaFetchByIdDto): Promise<Buffer>;
    getVideoByCode({ code }: MediaFetchByCodeDto): Promise<Buffer>;
    getVideoUrlById({ id }: MediaFetchByIdDto): Promise<string>;
    getVideoUrlByCode({ code }: MediaFetchByCodeDto): Promise<string>;
    getPublishDateByCode({ code, }: MediaFetchByCodeDto): Promise<Date | null>;
    getFramesImage({ code, frameNumber, platform, extension, }: GetFramesImageDto): Promise<string>;
    deleteContent({ code }: MediaFetchByCodeDto): Promise<void>;
    deleteContentById({ id }: MediaFetchByIdDto): Promise<void>;
    getContentCount(): Promise<number>;
    getMonitoredContentCount(): Promise<number>;
    getWatchedContentCount(): Promise<number>;
    getDownloadedVideosCount(): Promise<number>;
    getExtractedVideosCount(): Promise<number>;
}
